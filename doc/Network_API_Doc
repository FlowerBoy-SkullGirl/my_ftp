All main networking functions and definitions can be found in source/networking.h

# Packet Structure

Version Control Packet:
 ________________________________________________________________
|      4 Bytes        |     4 Bytes   |     4 Bytes   | 500 Bytes|
 ----------------------------------------------------------------
| Session_Start Flag  | Major Version | Minor Version | Reserved |
 ----------------------------------------------------------------

Session ID Packet:
 ___________________________________
|      4 Bytes      |   4 Bytes     |
 -----------------------------------
|  Session ID Flag  |   Session Id  |
 -----------------------------------

File Metadata Packet:

 ________________________________________________________________________________
|      1 Byte   |   1 Byte   | 2 Bytes  |  8 Bytes  |     8 Bytes    | 492 Bytes |
 --------------------------------------------------------------------------------
| Metadata Flag | Session ID | Reserved | File size | File name size | File name |
 --------------------------------------------------------------------------------

Error Hangup Packet:
 ___________________________________
|      4 Bytes      |   4 Bytes     |
 -----------------------------------
| Session End Flag  | Error Message |
 -----------------------------------

Payload Packet:
 ___________________________________
|      4 Bytes      |   508 Bytes   |
 -----------------------------------
| Payload Type Flag |      Data     |
 -----------------------------------


# Version Control
The server and client applications will ensure that they are using the same protocol version by checking the STANDARD_VERSION_MAJ and STANDARD_VERSION_MIN values defined in networking.h.
This process takes place in handshake_server() and handshake_client(), which are respectively in source/server.c and source/client.c

# Flags
PAYLOAD_FLAG, SIZE_FLAG, EOF_FLAG, and HASH_FLAG are used for the soon to be deprecated encapsulate() function. This function is being removed in favour of simply always reserving the first 4 bytes of a packet for the flag.

The remaining flags are 4 bytes in size, but use only the first 4 bits in case a use for the remaining 28 bits is later needed. 

PAYLOAD is a flag that denotes a packet containing PAYLOAD_BYTES of data, which is defined as the the size of each data (currently a uint32_t) less than PACKET_BYTES, which is currently 128 * the size of uint32_t. 

DIFF_SIZE is a flag used to denote that the following data in the packet is the remainder size of a file that is less than PAYLOAD_BYTES.

END_FLAG denotes that the end of the file has been reached and carries data of the size sent in the DIFF_SIZE packet.

HASH_PAYLOAD is currently unused and being reworked.

SESSION_ID_FLAG is used during the handshake process by the server to assign a session id to the client, and by the client to confirm it will use the correct session_id.

META_FLAG denotes a packet containing metadata for a file to be transferred. This packet can be built using the build_metadata_packet() function from source/file_metadata.h. The server uses this data to reconstruct its own copy of the metadata struct that the client has built.

END_SESSION
Is used to denote the end of the session between the client and the server before the socket is closed. This can be sent as either the result of an error or when the client has run out of files to send. 

RETRY_FLAG
Is planned to be used after an error to recover after a failed file transfer.

SESSION_START
Is a flag used in the handshake version control packet to initiate the negotiation of a session_id.

CORRUPTED_FLAG
Planned flag for future use to denote a corrupted file transfer.

# Structs

ftp_sock
The ftp_sock struct is used by the server to manage cli arguments that influence the socket.
A short is used for the port number.
An int is used to keep track of the maximum allowed number of waiting connections.

metadata
The metadata struct keeps track of file information so that it can be easily serialized and transmitted between the client and server.
Unsigned longs are used for the file size in bytes as reported by ftell() and the file name size in bytes as reported by strlen().
There is a char * to store the file name, which has memory allocated in the pack_file_data() function.

queue
The queue keeps track of different sessions connected to the server.
session_id is a char value that is chosen by the append_queue() function by querying get_avaiable_id() passed with the id_list.
socket is an int that matches the sockid associated with the connection.
queue *next points to the next session in the queue.

